CREATE TABLE DEPARTMENT ( 
    DEPT_ID   NUMBER PRIMARY KEY,  -- Department ID 
    DNAME     VARCHAR2(100),       -- Department Name 
    HOD       VARCHAR2(50)         -- Head of Department 
);

CREATE TABLE COURSE ( 
    CID    NUMBER PRIMARY KEY,     -- Course ID 
    CNAME  VARCHAR2(100),          -- Course Name 
    DURATION NUMBER,               -- Duration in Months 
    DEPT_ID NUMBER,                -- Foreign key linking to DEPARTMENT 
    CREDITS NUMBER,                -- Number of credits for the course 
    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) 
);

CREATE TABLE STUDENT ( 
    SID    NUMBER PRIMARY KEY,     -- Student ID 
    SNAME  VARCHAR2(50),           -- Student Name 
    DOB    DATE,                   -- Date of Birth 
    GENDER CHAR(1),                -- Gender ('M' or 'F') 
    EMAIL  VARCHAR2(100)           -- Email Address 
);

CREATE TABLE ENROLLMENT ( 
    ENROLL_ID NUMBER PRIMARY KEY,  -- Enrollment ID 
    SID       NUMBER,              -- Student ID (Foreign Key) 
    CID       NUMBER,              -- Course ID (Foreign Key) 
    ENROLL_DATE DATE,              -- Date of Enrollment 
    GRADE     CHAR(2),             -- Grade received (A, B, C, D, F) 
    FOREIGN KEY (SID) REFERENCES STUDENT(SID), 
    FOREIGN KEY (CID) REFERENCES COURSE(CID) 
);

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (1, 'Science', 'Dr. Smith');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (2, 'Arts', 'Prof. Johnson');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (3, 'Engineering', 'Dr. Allen');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (1, 'Science', 'Dr. Alice Cooper');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (2, 'Arts', 'Dr. Jonathan Lee');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (3, 'Engineering', 'Dr. Grace Hamilton');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (4, 'Business', 'Prof. Samuel Carter');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (5, 'Mathematics', 'Dr. Olivia Stone');

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS) VALUES (101, 'Physics', 6, 1, 4);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS) VALUES (102, 'History', 4, 2, 3);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS) VALUES (103, 'Computer Science', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (101, 'Physics', 6, 1, 4);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (102, 'History', 4, 2, 3);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (103, 'Computer Science', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (104, 'Business Management', 6, 4, 4);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (105, 'Calculus', 5, 5, 3);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (106, 'Data Structures', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (107, 'Artificial Intelligence', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (108, 'Literature', 4, 2, 3);

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL) VALUES (1, 'Alice', TO_DATE('2000-05-10', 'YYYY-MM-DD'), 'F', 'alice@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL) VALUES (2, 'Bob', TO_DATE('1999-07-19', 'YYYY-MM-DD'), 'M', 'bob@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL) VALUES (3, 'Charlie', TO_DATE('2001-09-22', 'YYYY-MM-DD'), 'M', 'charlie@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (1, 'Alice Brown', TO_DATE('2000-04-15', 'YYYY-MM-DD'), 'F', 'alice.brown@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (2, 'Bob Smith', TO_DATE('1999-07-19', 'YYYY-MM-DD'), 'M', 'bob.smith@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (3, 'Charlie Davis', TO_DATE('2001-09-22', 'YYYY-MM-DD'), 'M', 'charlie.davis@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (4, 'Diana Evans', TO_DATE('2000-05-30', 'YYYY-MM-DD'), 'F', 'diana.evans@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (5, 'Ethan Fox', TO_DATE('1999-12-10', 'YYYY-MM-DD'), 'M', 'ethan.fox@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (6, 'Fiona Gray', TO_DATE('2000-07-12', 'YYYY-MM-DD'), 'F', 'fiona.gray@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (7, 'George Harris', TO_DATE('1998-08-25', 'YYYY-MM-DD'), 'M', 'george.harris@example.com');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1001, 1, 101, TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1002, 1, 102, TO_DATE('2023-02-14', 'YYYY-MM-DD'), 'B');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1003, 2, 101, TO_DATE('2023-03-01', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1004, 3, 103, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1001, 1, 101, TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1002, 2, 103, TO_DATE('2023-02-14', 'YYYY-MM-DD'), 'B');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1003, 3, 104, TO_DATE('2023-03-01', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1004, 4, 102, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 'B');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1005, 5, 105, TO_DATE('2023-01-12', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1006, 6, 106, TO_DATE('2023-02-25', 'YYYY-MM-DD'), 'C');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1007, 7, 107, TO_DATE('2023-03-30', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1008, 1, 103, TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'A');

COMMIT;

SELECT S.SNAME, C.CNAME, E.ENROLL_DATE, E.GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
WHERE C.CNAME = 'Computer Science';

SELECT S.SNAME, C.CNAME, E.ENROLL_DATE, E.GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
WHERE C.CNAME = 'Computer Science';

SELECT S.SNAME, E.GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
WHERE C.CNAME = 'Physics';

SELECT D.DNAME, COUNT(E.SID) AS STUDENT_COUNT 
FROM DEPARTMENT D 
JOIN COURSE C ON D.DEPT_ID = C.DEPT_ID 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY D.DNAME;

SELECT C.CNAME, COUNT(E.SID) AS TOTAL_ENROLLMENTS 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY C.CNAME 
ORDER BY TOTAL_ENROLLMENTS DESC;

SELECT C.CNAME, S.SNAME, E.GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
WHERE E.GRADE = 'A';

SELECT C.CNAME, S.SNAME, E.GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
WHERE E.GRADE = 'F';

SELECT C.CNAME, S.SNAME, E.GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
WHERE E.GRADE = 'F';

SELECT S.SNAME, S.EMAIL 
FROM STUDENT S 
LEFT JOIN ENROLLMENT E ON S.SID = E.SID 
WHERE E.SID IS NULL;

UPDATE ENROLLMENT 
SET GRADE = 'B' 
WHERE SID = 1 
AND CID = 101;

SELECT C.CNAME, AVG(CASE  
                        WHEN GRADE = 'A' THEN 4  
                        WHEN GRADE = 'B' THEN 3 
                        WHEN GRADE = 'C' THEN 2 
                        WHEN GRADE = 'D' THEN 1 
                        ELSE 0  
                    END) AS AVG_GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY C.CNAME;

SELECT D.DNAME, COUNT(DISTINCT S.SID) AS STUDENT_COUNT 
FROM DEPARTMENT D 
JOIN COURSE C ON D.DEPT_ID = C.DEPT_ID 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
GROUP BY D.DNAME 
ORDER BY STUDENT_COUNT DESC;

SELECT S.SNAME, COUNT(E.CID) AS COURSE_COUNT 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING COUNT(E.CID) > 3;

SELECT S.SNAME, COUNT(DISTINCT D.DEPT_ID) AS DEPARTMENT_COUNT 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
JOIN DEPARTMENT D ON C.DEPT_ID = D.DEPT_ID 
GROUP BY S.SNAME 
HAVING COUNT(DISTINCT D.DEPT_ID) >= 2;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
JOIN DEPARTMENT D ON C.DEPT_ID = D.DEPT_ID 
WHERE D.DNAME = 'Science' 
GROUP BY S.SNAME 
HAVING COUNT(C.CID) = (SELECT COUNT(*)  
                       FROM COURSE  
                       WHERE DEPT_ID = (SELECT DEPT_ID  
                                        FROM DEPARTMENT  
                                        WHERE DNAME = 'Science'));

SELECT DISTINCT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
WHERE E.GRADE = 'F';

SELECT S.SNAME, AVG(CASE  
                        WHEN E.GRADE = 'A' THEN 4  
                        WHEN E.GRADE = 'B' THEN 3 
                        WHEN E.GRADE = 'C' THEN 2 
                        WHEN E.GRADE = 'D' THEN 1 
                        ELSE 0  
                   END) AS AVG_GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME;

SELECT C.CNAME 
FROM COURSE C 
LEFT JOIN ENROLLMENT E ON C.CID = E.CID 
WHERE E.CID IS NULL;

SELECT DISTINCT S2.SNAME 
FROM STUDENT S1 
JOIN ENROLLMENT E1 ON S1.SID = E1.SID 
JOIN ENROLLMENT E2 ON E1.CID = E2.CID 
JOIN STUDENT S2 ON E2.SID = S2.SID 
WHERE S1.SNAME = 'Alice Brown' 
AND S2.SNAME != 'Alice Brown';

SELECT S1.SNAME AS STUDENT_1, S2.SNAME AS STUDENT_2 
FROM ENROLLMENT E1 
JOIN ENROLLMENT E2 ON E1.CID = E2.CID 
JOIN STUDENT S1 ON E1.SID = S1.SID 
JOIN STUDENT S2 ON E2.SID = S2.SID 
GROUP BY S1.SNAME, S2.SNAME 
HAVING COUNT(DISTINCT E1.CID) = (SELECT COUNT(DISTINCT CID)  
                                 FROM ENROLLMENT  
                                 WHERE SID = S1.SID) 
AND S1.SNAME != S2.SNAME;

SELECT S1.SNAME AS STUDENT_1, S2.SNAME AS STUDENT_2 
FROM ENROLLMENT E1 
JOIN ENROLLMENT E2 ON E1.CID = E2.CID 
JOIN STUDENT S1 ON E1.SID = S1.SID 
JOIN STUDENT S2 ON E2.SID = S2.SID 
GROUP BY S1.SNAME, S2.SNAME 
HAVING COUNT(DISTINCT E1.CID) = (SELECT COUNT(DISTINCT CID)  
                                 FROM ENROLLMENT  
                                 WHERE SID = S1.SID) 
AND S1.SNAME != S2.SNAME;

SELECT D.DNAME, MAX(E.GRADE) AS HIGHEST_GRADE, MIN(E.GRADE) AS LOWEST_GRADE 
FROM DEPARTMENT D 
JOIN COURSE C ON D.DEPT_ID = C.DEPT_ID 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY D.DNAME;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

CREATE TABLE DEPARTMENT ( 
    DEPT_ID   NUMBER PRIMARY KEY,  -- Department ID 
    DNAME     VARCHAR2(100),       -- Department Name 
    HOD       VARCHAR2(50)         -- Head of Department 
);

CREATE TABLE COURSE ( 
    CID    NUMBER PRIMARY KEY,     -- Course ID 
    CNAME  VARCHAR2(100),          -- Course Name 
    DURATION NUMBER,               -- Duration in Months 
    DEPT_ID NUMBER,                -- Foreign key linking to DEPARTMENT 
    CREDITS NUMBER,                -- Number of credits for the course 
    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) 
);

CREATE TABLE STUDENT ( 
    SID    NUMBER PRIMARY KEY,     -- Student ID 
    SNAME  VARCHAR2(50),           -- Student Name 
    DOB    DATE,                   -- Date of Birth 
    GENDER CHAR(1),                -- Gender ('M' or 'F') 
    EMAIL  VARCHAR2(100)           -- Email Address 
);

CREATE TABLE ENROLLMENT ( 
    ENROLL_ID NUMBER PRIMARY KEY,  -- Enrollment ID 
    SID       NUMBER,              -- Student ID (Foreign Key) 
    CID       NUMBER,              -- Course ID (Foreign Key) 
    ENROLL_DATE DATE,              -- Date of Enrollment 
    GRADE     CHAR(2),             -- Grade received (A, B, C, D, F) 
    FOREIGN KEY (SID) REFERENCES STUDENT(SID), 
    FOREIGN KEY (CID) REFERENCES COURSE(CID) 
);

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (1, 'Science', 'Dr. Smith');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (2, 'Arts', 'Prof. Johnson');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (3, 'Engineering', 'Dr. Allen');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (1, 'Science', 'Dr. Alice Cooper');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (2, 'Arts', 'Dr. Jonathan Lee');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (3, 'Engineering', 'Dr. Grace Hamilton');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (4, 'Business', 'Prof. Samuel Carter');

INSERT INTO DEPARTMENT (DEPT_ID, DNAME, HOD) VALUES (5, 'Mathematics', 'Dr. Olivia Stone');

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS) VALUES (101, 'Physics', 6, 1, 4);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS) VALUES (102, 'History', 4, 2, 3);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS) VALUES (103, 'Computer Science', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (101, 'Physics', 6, 1, 4);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (102, 'History', 4, 2, 3);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (103, 'Computer Science', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (104, 'Business Management', 6, 4, 4);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (105, 'Calculus', 5, 5, 3);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (106, 'Data Structures', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (107, 'Artificial Intelligence', 8, 3, 5);

INSERT INTO COURSE (CID, CNAME, DURATION, DEPT_ID, CREDITS)  
VALUES (108, 'Literature', 4, 2, 3);

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL) VALUES (1, 'Alice', TO_DATE('2000-05-10', 'YYYY-MM-DD'), 'F', 'alice@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL) VALUES (2, 'Bob', TO_DATE('1999-07-19', 'YYYY-MM-DD'), 'M', 'bob@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL) VALUES (3, 'Charlie', TO_DATE('2001-09-22', 'YYYY-MM-DD'), 'M', 'charlie@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (1, 'Alice Brown', TO_DATE('2000-04-15', 'YYYY-MM-DD'), 'F', 'alice.brown@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (2, 'Bob Smith', TO_DATE('1999-07-19', 'YYYY-MM-DD'), 'M', 'bob.smith@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (3, 'Charlie Davis', TO_DATE('2001-09-22', 'YYYY-MM-DD'), 'M', 'charlie.davis@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (4, 'Diana Evans', TO_DATE('2000-05-30', 'YYYY-MM-DD'), 'F', 'diana.evans@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (5, 'Ethan Fox', TO_DATE('1999-12-10', 'YYYY-MM-DD'), 'M', 'ethan.fox@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (6, 'Fiona Gray', TO_DATE('2000-07-12', 'YYYY-MM-DD'), 'F', 'fiona.gray@example.com');

INSERT INTO STUDENT (SID, SNAME, DOB, GENDER, EMAIL)  
VALUES (7, 'George Harris', TO_DATE('1998-08-25', 'YYYY-MM-DD'), 'M', 'george.harris@example.com');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1001, 1, 101, TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1002, 1, 102, TO_DATE('2023-02-14', 'YYYY-MM-DD'), 'B');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1003, 2, 101, TO_DATE('2023-03-01', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE) VALUES (1004, 3, 103, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1001, 1, 101, TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1002, 2, 103, TO_DATE('2023-02-14', 'YYYY-MM-DD'), 'B');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1003, 3, 104, TO_DATE('2023-03-01', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1004, 4, 102, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 'B');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1005, 5, 105, TO_DATE('2023-01-12', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1006, 6, 106, TO_DATE('2023-02-25', 'YYYY-MM-DD'), 'C');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1007, 7, 107, TO_DATE('2023-03-30', 'YYYY-MM-DD'), 'A');

INSERT INTO ENROLLMENT (ENROLL_ID, SID, CID, ENROLL_DATE, GRADE)  
VALUES (1008, 1, 103, TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'A');

COMMIT;

 SELECT S.SNAME, C.CNAME, E.ENROLL_DATE, E.GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
WHERE C.CNAME = 'Computer Science';

SELECT S.SNAME, E.GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
WHERE C.CNAME = 'Physics';

SELECT D.DNAME, COUNT(E.SID) AS STUDENT_COUNT 
FROM DEPARTMENT D 
JOIN COURSE C ON D.DEPT_ID = C.DEPT_ID 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY D.DNAME;

 SELECT C.CNAME, COUNT(E.SID) AS TOTAL_ENROLLMENTS 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY C.CNAME 
ORDER BY TOTAL_ENROLLMENTS DESC;

 SELECT C.CNAME, S.SNAME, E.GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
WHERE E.GRADE = 'A';

 SELECT C.CNAME, S.SNAME, E.GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
WHERE E.GRADE = 'F';

SELECT S.SNAME, S.EMAIL 
FROM STUDENT S 
LEFT JOIN ENROLLMENT E ON S.SID = E.SID 
WHERE E.SID IS NULL;

UPDATE ENROLLMENT 
SET GRADE = 'B' 
WHERE SID = 1 
AND CID = 101;

SELECT C.CNAME, AVG(CASE  
                        WHEN GRADE = 'A' THEN 4  
                        WHEN GRADE = 'B' THEN 3 
                        WHEN GRADE = 'C' THEN 2 
                        WHEN GRADE = 'D' THEN 1 
                        ELSE 0  
                    END) AS AVG_GRADE 
FROM COURSE C 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY C.CNAME;

SELECT D.DNAME, COUNT(DISTINCT S.SID) AS STUDENT_COUNT 
FROM DEPARTMENT D 
JOIN COURSE C ON D.DEPT_ID = C.DEPT_ID 
JOIN ENROLLMENT E ON C.CID = E.CID 
JOIN STUDENT S ON E.SID = S.SID 
GROUP BY D.DNAME 
ORDER BY STUDENT_COUNT DESC;

SELECT S.SNAME, COUNT(E.CID) AS COURSE_COUNT 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING COUNT(E.CID) > 3;

 SELECT S.SNAME, COUNT(DISTINCT D.DEPT_ID) AS DEPARTMENT_COUNT 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
JOIN DEPARTMENT D ON C.DEPT_ID = D.DEPT_ID 
GROUP BY S.SNAME 
HAVING COUNT(DISTINCT D.DEPT_ID) >= 2;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
JOIN COURSE C ON E.CID = C.CID 
JOIN DEPARTMENT D ON C.DEPT_ID = D.DEPT_ID 
WHERE D.DNAME = 'Science' 
GROUP BY S.SNAME 
HAVING COUNT(C.CID) = (SELECT COUNT(*)  
                       FROM COURSE  
                       WHERE DEPT_ID = (SELECT DEPT_ID  
                                        FROM DEPARTMENT  
                                        WHERE DNAME = 'Science'));

SELECT DISTINCT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
WHERE E.GRADE = 'F';

 SELECT S.SNAME, AVG(CASE  
                        WHEN E.GRADE = 'A' THEN 4  
                        WHEN E.GRADE = 'B' THEN 3 
                        WHEN E.GRADE = 'C' THEN 2 
                        WHEN E.GRADE = 'D' THEN 1 
                        ELSE 0  
                   END) AS AVG_GRADE 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME;

SELECT C.CNAME 
FROM COURSE C 
LEFT JOIN ENROLLMENT E ON C.CID = E.CID 
WHERE E.CID IS NULL;

SELECT DISTINCT S2.SNAME 
FROM STUDENT S1 
JOIN ENROLLMENT E1 ON S1.SID = E1.SID 
JOIN ENROLLMENT E2 ON E1.CID = E2.CID 
JOIN STUDENT S2 ON E2.SID = S2.SID 
WHERE S1.SNAME = 'Alice Brown' 
AND S2.SNAME != 'Alice Brown';

SELECT S1.SNAME AS STUDENT_1, S2.SNAME AS STUDENT_2 
FROM ENROLLMENT E1 
JOIN ENROLLMENT E2 ON E1.CID = E2.CID 
JOIN STUDENT S1 ON E1.SID = S1.SID 
JOIN STUDENT S2 ON E2.SID = S2.SID 
GROUP BY S1.SNAME, S2.SNAME 
HAVING COUNT(DISTINCT E1.CID) = (SELECT COUNT(DISTINCT CID)  
                                 FROM ENROLLMENT  
                                 WHERE SID = S1.SID) 
AND S1.SNAME != S2.SNAME;

SELECT D.DNAME, MAX(E.GRADE) AS HIGHEST_GRADE, MIN(E.GRADE) AS LOWEST_GRADE 
FROM DEPARTMENT D 
JOIN COURSE C ON D.DEPT_ID = C.DEPT_ID 
JOIN ENROLLMENT E ON C.CID = E.CID 
GROUP BY D.DNAME;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT S.SNAME 
FROM STUDENT S 
JOIN ENROLLMENT E ON S.SID = E.SID 
GROUP BY S.SNAME 
HAVING MAX(E.ENROLL_DATE) - MIN(E.ENROLL_DATE) > INTERVAL '3' MONTH;

SELECT C.CNAME, C.CREDITS 
FROM COURSE C 
WHERE C.CREDITS > (SELECT AVG(CREDITS) FROM COURSE);

